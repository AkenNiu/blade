// Sketch blade (ctrl  command b)

/* Import the variables and complain if they are undefined */
#import 'blade/config.js'
#import 'blade/sandbox.js'
#import 'blade/util.js'
#import 'blade/binding.js'
#import 'blade/dom.js'

/* Import dom generators*/
#import 'blade/dom_generators.js'

/* Import all bindings*/
#import 'blade/bindings/default.js'
#import 'blade/bindings/ignore.js'
#import 'blade/bindings/hover.js'
#import 'blade/bindings/case.js'


function export_as_img( layer, filename ){
    // copy off-screen
    var layer_copy = [layer duplicate];
    var frame = [layer_copy frame];

    [frame setX:-100000];
    [frame setY:-100000];


    // export
    var rect = [layer_copy rectByAccountingForStyleSize:[[layer_copy absoluteRect] rect]],
        slice = [MSSlice sliceWithRect:rect scale:2];

    if (in_sandbox()) {
        sandboxAccess.accessFilePath_withBlock_persistPermission( Config.target_folder, function(){
            [doc saveArtboardOrSlice:slice toFile:filename];
        }, true)
    } else {
        [doc saveArtboardOrSlice:slice toFile:filename];
    }

    // remove it
    [layer_copy removeFromParent];
}

function output( processResult ){

    //1. Create folders
    if (in_sandbox()) {
        sandboxAccess.accessFilePath_withBlock_persistPermission( Config.target_folder, function(){
            if( Util.folder_exist( Config.target_folder) ){
                Util.remove_folder( Config.target_folder)
            }
            Util.create_folders(
                        [NSArray arrayWithObjects:
                            Config.target_folder,Config.images_folder,Config.js_folder,Config.css_folder,nil])
        }, true)
    } else {
        if( Util.folder_exist( Config.target_folder) ){
            Util.remove_folder( Config.target_folder)
        }
        Util.create_folders(
            [NSArray arrayWithObjects:
                Config.target_folder,Config.images_folder,Config.js_folder,Config.css_folder,nil])
    }

    //2. Save inline script as single file
    // Single script structure : {comment:"",src:"",script:""}
    var scriptStr = "", scripts = Config.global_scripts.concat(processResult.scripts), scriptsCache={}
    Util.log( 'scripts length:' + scripts.length)
    Util.each( scripts, function(scriptObj){
        if( scriptObj.src && !scriptsCache[scriptObj.src]){
            var scriptNode = Dom.create('script').attr('src',scriptObj.src)
            processResult.dom.append(scriptNode)

            if( scriptObj.origin ){
                Util.copy( scriptObj.origin, scriptObj.src )
            }
            scriptsCache[scriptObj.src] = true
        }else{
            scriptStr += ['/* '+scriptObj.comment+' */',Util.script_to_string(scriptObj.script),''].join('\n')
        }
    })

    if( scriptStr ){
        var scriptSrc = Config.target_folder + "/index.js"
        processResult.dom.append( Dom.create('script').attr('src', scriptSrc ) )
        Util.save_file_from_string( scriptSrc, scriptStr);
    }

    //3. Save css as single file
    // Single style structure: {comment:"",href:"",style:{name:value}}
    var styleStr = "", styles = Config.global_styles.concat( processResult.styles),stylesCache = {}
    Util.each( styles, function(styleObj){
        if( styleObj.href && !scriptsCache[styleObj.href] ){
            processResult.dom.prepend(
                Dom.create('link').attr('href',styleObj.href).attr('type','text/css').attr('rel','stylesheet'))

            if( styleObj.origin ){
                Util.copy( styleObj.origin, styleObj.href )
            }
            stylesCache[styleObj.href] = true
        }else{
            styleStr += ['/* '+styleObj.comment+' */', Util.join(styleObj.style,":",";") ,''].join('\n')
        }
    })
    if( styleStr ){
        var styleSrc = Config.target_folder + "/index.css"
        processResult.dom.append(
            Dom.create('link').attr('href',styleSrc).attr('type','text/css').attr('rel','stylesheet'))

        Util.save_file_from_string( styleSrc, styleStr);
    }

    //4. Export images
    if( processResult.exportFiles ){
        Util.each( processResult.exportFiles, function( fileObj ){
            export_as_img( fileObj.layer, fileObj.target )
        })
    }

    //5. Save html
    Util.save_file_from_string(Config.target_folder + "/index.html", processResult.dom.outerHTML);
}


function main() {
    Util.execute(function() {
        var start = new Date().getTime()

        Util.log("###################")
        Util.log("### blade start ###")
        Util.log("###################")

        //1. Process layers
        var layers = [[doc currentPage] layers],
            processResult

        Util.each( layers, function( subLayer ){
            processResult = Binding.apply_bindings( subLayer );
        })

        //2. output files
        Util.log( processResult.dom.outerHTML )
        output( processResult )

        var end = new Date().getTime()
        Util.log("Time used: " +(end - start))
        Util.log("###################")
        Util.log("###  blade end  ###")
        Util.log("###################")
    })
}

main();
